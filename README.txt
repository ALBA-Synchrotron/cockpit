MUI is a hardware-agnostic microscope user interface. 

=== INSTALLATION ===
You will need the following to run MUI:
 * Python 2.7
 * numpy
 * scipy
 * PyOpenGL
 * FTGL
 * Pyro4
 * wxPython

Then simply run cockpit.pyw and the program should start. 


=== CUSTOMIZATION ===
Of course, the cockpit isn't much good without any hardware. The "devices" 
directory should be the only directory that you will need to modify; it's here
that you can hook up your hardware to the cockpit. 

Each device module should follow this general pattern:

import device
CLASS_NAME = "MyDevice"

class MyDevice(device.Device):
    ...

All you need to do is create the module; all valid Devices are created when 
the program starts.

The primary task that Devices are responsible for is creation of DeviceHandlers.
Each Handler represents an abstract bit of hardware, for example a camera or
stage mover. The getHandlers() function is expected to generate and return
a list of Handlers; the UI then interacts with these Handlers when the user 
performs actions. Take a look at the "devices/handlers" directory for the 
available handlers. 


=== EVENTS ===
MUI includes an event-publishing system to handle some communications between
different components. An "event" is simply a string and some associated data.
Code can "subscribe" to a specific event; when other code "publishes" that
event, then the subscribers are all called. For example, if you have some 
code that wants to know when the user clicks on the "abort" button, then
you would do this:

import events
events.subscribe('user abort', self.onAbort)

def onAbort(self):
    ...

If your code wants to let the rest of the program know that a new camera 
image has appeared, then you would do this:

import events
events.publish('new image %s' % cameraName, imageData)

A complete list of all events that the system currently supports is below. 
Some of your devices will need to publish these events; some of them are 
generated by the UI instead and your devices will need to subscribe to them.

Device-generated events:
 * "drawer change", drawer settings: the filters in front of each camera are
   different (DEVICE)
 * "experiment execution": some component of the currently-running experiment
   has finished (DEVICE)
 * "new image <camera name>", image data: An image has arrived for the camera
   with the given name (DEVICE)
 * "stage mover", moverName: A StagePositioner Handler is moving (DEVICE)
 * "stage stopped", moverName: A StagePositioner Handler has stopped moving
   (DEVICE)

UI-generated events:
 * "experiment complete": the entirety of an experiment has finished execution
   (UI)
 * "image pixel info", coordinates, value: the mouse has moved over a camera
   view, and the specified coordinates have the given value (UI)
 * "new site", Site instance: the user has marked a position as being of
   interest (UI)
 * "prepare for experiment", Experiment instance: An experiment is about to be
   executed, so devices should prepare themselves (UI)
 * "site deleted", Site instance: the specified Site is to be forgotten (UI)
 * "soft safety limit", axis, limit, isMax: the software-enforced motion
   limits for the given axis (summing all stage-positioner devices) have been
   changed (UI)
 * "stage position", position tuple: the stage currently is at the specified
   position (UI)
 * "stage step index", index: Which Handler is currently being used to move
   the stage has been changed; the Handlers are arranged in order of maximum
   range of motion (UI)
 * "stage step size", axis, step size: The amount of distance the stage will
   move when the user uses the numeric keypad has changed (UI)
 * "user abort": the user clicked on the Abort button (UI)
 * "user login", user name: the specified user has logged in (UI)
 * "user logout": the current user is logging out (UI)

Handler-generated events:
 * "global filter change", filter ID, filter position: A light attenuation
   filter that is on all light sources' paths has changed, so the transmission
   values for each light source must be recalculated (HANDLER)
 * "light source (enable|disable)", handler: the light source associated with
   the provided Handler has been enabled / disabled for taking images (HANDLER)
 * "objective change", objective name, pixel size: the objective has been
   changed (HANDLER)

Miscellaneous events:
 * "new status light", lightName, text, color: Create a new "status light" 
   that shows the user some bit of important hardware state.
 * "update status light", lightName, newText, newColor: Change one of the 
   status lights.

